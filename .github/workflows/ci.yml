name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    DOCKER_BUILDKIT: 1
    COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
    lint:
        name: Lint Code
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18"
                  cache: "npm"

            - name: Lint MCP Server
              working-directory: ./mcp-server
              run: |
                  npm ci
                  npm run lint

            - name: Lint Code Developer
              working-directory: ./code-developer
              run: |
                  npm ci
                  npm run lint

            - name: Lint Desktop App
              working-directory: ./desktop-app
              run: |
                  npm ci
                  npm run lint

    test:
        name: Run Tests
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18"

            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"

            - name: Test MCP Server
              working-directory: ./mcp-server
              run: |
                  npm ci
                  npm test

            - name: Test Python Services
              run: |
                  cd research-crawler
                  pip install -r requirements.txt
                  python -m pytest tests/

                  cd ../doc-generator
                  pip install -r requirements.txt
                  python -m pytest tests/

    build:
        name: Build Docker Images
        runs-on: ubuntu-latest
        needs: [lint, test]

        steps:
            - uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Login to Docker Hub
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build MCP Server
              uses: docker/build-push-action@v4
              with:
                  context: ./mcp-server
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ secrets.DOCKER_USERNAME }}/research-mcp-server:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build Research Crawler
              uses: docker/build-push-action@v4
              with:
                  context: ./research-crawler
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ secrets.DOCKER_USERNAME }}/research-crawler:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build Code Developer
              uses: docker/build-push-action@v4
              with:
                  context: ./code-developer
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ secrets.DOCKER_USERNAME }}/code-developer:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build Document Generator
              uses: docker/build-push-action@v4
              with:
                  context: ./doc-generator
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ secrets.DOCKER_USERNAME }}/doc-generator:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    integration-test:
        name: Integration Tests
        runs-on: ubuntu-latest
        needs: build

        steps:
            - uses: actions/checkout@v3

            - name: Start services
              run: |
                  cp .env.example .env
                  docker-compose up -d
                  sleep 30  # Wait for services to start

            - name: Run integration tests
              run: |
                  # Test MCP Server health
                  curl -f http://localhost:3000/health || exit 1

                  # Test Research Crawler health
                  curl -f http://localhost:5000/health || exit 1

                  # Test Code Developer health
                  curl -f http://localhost:8080/health || exit 1

                  # Test Document Generator health
                  curl -f http://localhost:5001/health || exit 1

            - name: Stop services
              if: always()
              run: docker-compose down

    build-desktop:
        name: Build Desktop App
        runs-on: ${{ matrix.os }}
        needs: [lint, test]

        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]

        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18"

            - name: Install dependencies
              working-directory: ./desktop-app
              run: npm ci

            - name: Build app
              working-directory: ./desktop-app
              run: npm run build

            - name: Build Electron app
              working-directory: ./desktop-app
              run: |
                  if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
                    npm run dist:linux
                  elif [ "${{ matrix.os }}" == "windows-latest" ]; then
                    npm run dist:win
                  else
                    npm run dist:mac
                  fi
              shell: bash

            - name: Upload artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: desktop-app-${{ matrix.os }}
                  path: desktop-app/dist/*
